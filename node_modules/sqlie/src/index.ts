export {ClauseBuilder} from './builder/clause';
export {DeleteBuilder} from './builder/delete';
export {InsertBuilder} from './builder/insert';
export {SelectBuilder, JoinBuilder, JoinSelectBuilder} from './builder/select';
export {UpdateBuilder} from './builder/update';

import {ModelBuilder} from './model';

export {ModelBuilder};

let query: QueryHandler;

type QueryCallback = (err: any, rows: Record<string, object>[], fields: Record<string, any>) => void;

interface QueryHandler {
  (sql: string, params: any[], callback: QueryCallback): void;
}

/**
 * 创建模型对象
 * @param {string} table 表名称
 * @param {string} [pk] 主键名称，默认位 'id'
 */
export function createModel(table: string, pk: string = 'id') {
  return new ModelBuilder(table, pk);
}

/**
 * 设置SQL语句执行函数
 * @param {function} handler SQL语句执行函数
 */
export function setQueryHandler(handler) {
  query = handler;
}

/**
 * 执行 SQL 语句
 * @param {string} sql 被执行语句
 * @param {Array<string | number>} [params] 执行参数
 * @returns {Promise<*>}
 */
export function execute(sql: string, params: Array<string> = []): Promise<any> {
  return new Promise(function (resolve, reject) {
    if (!query) {
      reject(new Error('no query handler'))
    } else {
      query(sql, params, function (err, rows, fields) {
        if (err) reject(err);
        else resolve({rows, fields});
      });
    }
  });
}

ModelBuilder.execute = execute;
